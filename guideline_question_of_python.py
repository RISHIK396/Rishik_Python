# -*- coding: utf-8 -*-
"""guideline question of python

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZZSZ12ZhR3qQC7ejD09gwNPRiS8iGwYD
"""

#objective:- to calculate roots of a quadratic equation
#input:- a:int,b:int,c:int
#output:-positive_root,negative_root
a=int(input("Enter the first number:"))
b=int(input("Enter the second number:"))
c=int(input("Enter the third number:"))

positive_root=(b*(b**2-4*a*c)**1/2)/2*a
negative_root=-(b*(b**2-4*a*c)**1/2)/2*a

print("THE ROOTS OF THE QUADRATIC EQUATION ARE:",positive_root)
print(negative_root)

#printing that whether a number is  a prime number or not
#input-num-integer
#output print whether a number is a prime number or not
num=int(input("enter the number to be checked:"))
if num==1 or num==0:
    print("the numnber entered is not a prime number:")
else:
    for i in range (2,num):
        if num%i==0:
          ans=True
          break
        
        else:
          ans=False
if ans==True:
  print("the number is not a prime number")
else:
  print("the number entered is a prime number")

# checking the number of prime numbers till n where n is entered by a user
n=int(input("enter the number till which you want prime numbers to be generated"))
for i in range(2,n+1):
  j=2
  while (j<=(i/2)):

    if(i%j==0):
      break
    j+=1
  if(j>i/j):
    print(i,"is a prime number")
print("Bye Bye")

def prime(num):
  ans=''
  if num==1 or num==0:
    pass
  else:
    for i in range(2,num):
      if num%i==0:
        ans='no'
        break
      else:
        ans='yes'
    if ans=='yes':
      return num
    else:
      pass
#print(prime(7))

num=int(input("enter the number of prime numbers you want: "))
list1=[]
count=2
while True:
  c=prime(count)
  if c==None:
    pass
  else:
    list1.append(c)
  count+=1
  if len(list1)==num:
    break
print("the first n prime number are: ")
print(list1)

#printing stars in a upward pyramid format
rows=int(input("enter the number of rows:"))
for i in range(rows):
  spaces=' '*(20-i)
  stars='*'*(2*i-1)
  print(spaces+stars)

#printing stars in a downward pyramid fr=ormat
rows=int(input("enter the number of rows: "))
for i in range(rows,0,-1):
  spaces=(' '*(20-i))
  stars=('*'*(2*i-1))
  print(spaces+stars)

#printing a right triangle star pattern
n=int(input('Enter a Number:'))
for i in range(0,n+1):
    for j in range(0,(i+1)):
        print(i*'','*',end='')
    print()

#objective-accepts a charater and perform various operations
#input-character-input
#output-printing the 
character=input("enter any character to be checked: ")
if character.isalpha():
  print("the character entered by the user is a letter")
  if character.isupper():
    print("the character is in upper case")
  else:
    print("the character is in lower case")
elif character.isnumeric():
  print("the character entered is a numeric type")
  if character=='1':
    print("the digit is one")
  elif character=='2':
    print("the digit is two")
  elif character=='3':
    print("the digit is three")
  elif character=='4':
    print("the digit is four")
  elif character=='5':
    print("the digit is five")
  elif character=='6':
    print("the digit is six")
  elif character=='7':
    print("the digit is seven")
  elif character=='8':
    print("the digit is eight")
  else:
    print("the digit is nine")
else:
  print("you have entered a special character")

#performing various operations on a string
#input- str1-input
#output-print the output after performing the various operations

str1=input("enter any string: ")
#the frequency of the string is
print("the frequency of the stringb is: ",len(str1))
#taking input from the user for replacement of a particular character
sub_str=input("enter the substring which is to be replaced: ")
replace_str=input("enter the string which will be replaced by: ")

def replace(string,sub_str,sub_str1):
  new_str=string.replace(sub_str,sub_str1)
  return new_str

# replacing a character by another character from the string
print("the original string is: ",str1)
print("the new string is: ")
new_str=replace(str1,sub_str,replace_str)
print(new_str)
str2=input("enter the character which is to be removed from a string: ")
list1=list(new_str)
print("removing the first occureness of a character from the string: ",str1)
list1.remove(str2)
str5=''
for i in list1:
  str5+=i
print(str5)

str3=input("enter the sub string whose all elements are to be removed from a list: ")
str7=str5.replace(str3,'')
print("the new string is: ",str7)

# program to swap the first n characters of a string
#input= str1-input,n=integer ,str2=input
#printing the two strings whose first n characters are swapped
str1=input("enter the string 1: ")
str2=input("enter the string 2: ")
n=int(input("enter the no. of characters which are to be swapped from the two strings"))
def swapping(str3,str4,n):
  print("the original string 1 is: ", str3)
  print("the original string 2 is: ",str4)
  sub_str1=str3[:n+1]
  sub_str2=str4[:n+1]
  new_str1=str3.replace(sub_str1,sub_str2)
  new_str2=str4.replace(sub_str2,sub_str1)
  print("the first swapped string is: ",new_str1)
  print("the second swapped string is: ",new_str2)
#swapping the two strings 
swapping(str1,str2,n)

#program to find the indexing of all the substring in a string and store it in a list
list1=[]

str1=input("enter any string: ")
sub_str=input("enter the sub string for which you want to find the index position: ")
if sub_str in str1:
  for i in range(len(str1)):
    if str1[i]==sub_str:
      list1.append(i)
elif sub_str not in str1[0:len(str1)]:
  list1.append(-1)
print(list1)

#program to create a list of the cubes of only even intergers from the input list
list1=eval(input("enter the list of any integers: "))
list2=[]
for i in list1:
  if i%2==0:
    list2.append(i**3)
print(list1,":is the original list")
print(list2,":is the modified list")

#doing various operations on a text file
a=open('abhi.txt','w')
a.write('PYTHON programs are good')
a.close()

#(a)Printing total no. of words, characters and lines
a=open('abhi.txt','r')
s1= a.read()
print('number of characters are:', len(s1))
a.close()

a= open('abhi.txt','r')
s2= a.readlines()
print('No. of lines are:', len(s2))

#(b)Calculating the frequency of each character
with open('abhi.txt','r') as a:
    s3= a.read()
    l1=[]
    for i in s3:
        c= i,s3.count(i)
        if c not in l1:
            l1.append(c)
    print('frequency of each character is:',l1)

#(c)printing words in reverse order
with open('abhi.txt','r') as a:
    s4=a.read()
    str1= ''
    for i in s4:
        str1= i +str1
    print('Reverse order:\n',str1)

#(d)#Copying even lines in file1 and odd files in file2
with open('abhi.txt','r') as a:
    s5= a.readlines()
    l1= []
    l2= []
    for i in range(len(s5)):
        if i%2==0:
            l1.append(s5[i])
        else:
            l2.append(s5[i])
            
f1= open('File1.txt','w')
f1.writelines(l1)
f1.close()

f2= open('File2.txt','w')
f2.writelines(l2)
f2.close()

#making a class in python of finding distance between two points
class Point:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def __str__(self):
        return "Point({0}, {1})".format(self.x, self.y)

    def distance(self, other_point):
        return ((self.x - other_point.x)**2 + (self.y - other_point.y)**2)**0.5
a=Point(2,3)

def cubic_dict():
    cubes = {i: i**3 for i in range(1, 6)}
#    return cubes
#print(cubic_dict())
    print(cubes)
cubic_dict()

#program to perform various operations on tuple
t1=(1,2,5,7,9,2,4,6,8,10)
t2=(11,13,15)
print("the length of the tuple is:",len(t1))
print("the first half tuple is:",t1[0:6])
print("the second half tuple is:",t1[5:10])
t3=()
for i in t1:
  if i%2==0:
    t3+=(i,)
print("the tuple with even elements are:",t2)
print("the concatenated tuple is:",t1+t2)
t4=t1+t2
print("the maximum value of tuple is: ",max(t4))
print("the minimum value of tuple is: ",min(t4))

def check_name(name):
    for i in name.split(' '):
        if i.isalpha()==False:
            raise ValueError("Name cannot contain digits or special characters.")
            
        return name
    
##    if name.isalpha()==False:
##        raise ValueError("Name cannot contain digits or special characters.")  
##    

try:
    name = input("Enter your name: ")
    print("Hi, " + check_name(name))
    #print("valid input")
except ValueError as e:
    print(e)